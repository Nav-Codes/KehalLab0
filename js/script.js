// Box class idea given by ChatGPT
class Box {
    #boxElement = document.createElement("button")

    constructor(num) {
        this.#boxElement.classList.add("box")
        this.#boxElement.style.backgroundColor = this.getRandomColor()
        this.#boxElement.disabled = true;
        this.#boxElement.value = num

        let btnText = document.createElement("p")
        btnText.style.color = "black"
        btnText.innerHTML = num
        this.#boxElement.insertAdjacentElement("beforeend", btnText)
    }

    //generated by ChatGPT
    getRandomColor() {
        return "#" + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
    }

    getBoxElement() {
        return this.#boxElement
    }

    //generated by ChatGPT and slightly modified
    moveToRandPosition() {
        // Get viewport dimensions
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;

        // Generate random positions
        const randomLeft = Math.random() * (viewportWidth - this.#boxElement.offsetWidth);
        const randomTop = Math.random() * (viewportHeight - this.#boxElement.offsetHeight);

        // Apply new position
        this.#boxElement.style.left = randomLeft + "px";
        this.#boxElement.style.top = randomTop + "px";
    }
}

// BoxManager class idea given by ChatGPT
class BoxManager {
    #boxArr = []
    static get GAME_AREA_ID() {return "gameArea"}

    generateBoxes(numBoxes) {
        document.getElementById("memoryGame").innerHTML = ""
        let gameArea = document.createElement("div")
        gameArea.id = BoxManager.GAME_AREA_ID
        document.getElementById("memoryGame").insertAdjacentElement("beforeend", gameArea)
        for (let i = 1; i <= numBoxes; i++) {
            this.#boxArr.push(new Box(i))
            document.getElementById(BoxManager.GAME_AREA_ID).insertAdjacentElement("beforeend", this.#boxArr.at(i - 1).getBoxElement())
        }
    }

    async shuffleBoxes() {
        //wait numBoxes seconds
        await sleep(this.#boxArr.length * 1000 - 2000)

        //shuffle
        for (let i = 0; i < this.#boxArr.length; i++) {
            await sleep(2000)
            for (let i = 0; i < this.#boxArr.length; i++) {
                this.#boxArr.at(i).getBoxElement().children[0].innerHTML = ""
                this.#boxArr.at(i).getBoxElement().style.position = "absolute"
                this.#boxArr.at(i).moveToRandPosition()
            }
        }

        for (let i = 0; i < this.#boxArr.length; i++) {
            this.#boxArr.at(i).getBoxElement().disabled = false
        }
    }
}

// MemoryGame class idea given by ChatGPT
class MemoryGame {
    static get INITIAL_MSG_ID() {return "initialMessage"}
    static get NUM_INPUT_ID() {return "numOfBoxes"}
    static get GO_BTN_ID() {return "goButton"}
    static get ERROR_MSG_ID() {return "errorMessage"}
    static get GAME_MSG_ID() {return "gameMessage"}
    
    #boxManager = new BoxManager()
    #currentClick = 1
    
    runGame() {
        this.createStartingElements()
        
        document.getElementById("initialMessage").innerHTML = INITIAL_MSG
        
        document.getElementById(MemoryGame.GO_BTN_ID).addEventListener("click", () => {
            if (this.checkNumBoxes()) {
                this.#boxManager.generateBoxes(document.getElementById(MemoryGame.NUM_INPUT_ID).value)
                this.#boxManager.shuffleBoxes()
                
                let gameMsg = document.createElement("p")
                gameMsg.id = MemoryGame.GAME_MSG_ID
                document.getElementById("memoryGame").insertAdjacentElement("afterbegin", gameMsg)
                
                this.checkClickOrder()
            }
        })
    }

    checkNumBoxes() {
        let numBoxes = document.getElementById(MemoryGame.NUM_INPUT_ID).value
        if (numBoxes > MAX_BOXES || numBoxes < MIN_BOXES || numBoxes == null) {
            document.getElementById(MemoryGame.ERROR_MSG_ID).innerHTML = INVALID_NUM_BOXES_MSG
            return false
        } else {
            return true
        }
    }

    createStartingElements() {
        document.getElementById("memoryGame").innerHTML = ""

        let initialMsg = document.createElement("p")
        initialMsg.id = MemoryGame.INITIAL_MSG_ID

        let numInput = document.createElement("input")
        numInput.type = "number"
        numInput.id = MemoryGame.NUM_INPUT_ID

        let goBtn = document.createElement("button")
        goBtn.id = MemoryGame.GO_BTN_ID
        goBtn.innerHTML = "Go!"

        let errorMsg = document.createElement("div")
        errorMsg.id = MemoryGame.ERROR_MSG_ID

        document.getElementById("memoryGame").insertAdjacentElement("beforeend", initialMsg)
        document.getElementById("memoryGame").insertAdjacentElement("beforeend", numInput)
        document.getElementById("memoryGame").insertAdjacentElement("beforeend", goBtn)
        document.getElementById("memoryGame").insertAdjacentElement("beforeend", errorMsg)
    }

    checkClickOrder() {
        document.querySelectorAll(".box").forEach((currentElement, currentIndex, listObj) => {
            currentElement.addEventListener("click", () => {
                if (currentElement.value == this.#currentClick) {
                    this.#currentClick++
                    currentElement.children[0].innerHTML = currentElement.value
                    currentElement.disabled = true
                } else {
                    this.displayLose()
                }
                if (this.#currentClick - 1 == document.querySelectorAll(".box").length) {
                    this.displayWin()
                }
            })
        })
    }

    displayLose() {
        document.querySelectorAll(".box").forEach((currentElement, currentIndex, listObj) => {
            currentElement.innerHTML = currentElement.value
        })
        document.getElementById(MemoryGame.GAME_MSG_ID).innerHTML = LOSE_MSG
        this.restartGame()
    }

    displayWin() {
        document.getElementById(MemoryGame.GAME_MSG_ID).innerHTML = WIN_MSG
        this.restartGame()
    }

    async restartGame() {
        await sleep(3000)
        this.#boxManager = new BoxManager()
        this.#currentClick = 1
        this.runGame()
    }
}

//Generated by ChatGPT
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

const memoryGame = new MemoryGame()
memoryGame.runGame()